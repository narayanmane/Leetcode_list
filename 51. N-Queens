class Solution {
    
    public void  helper(char[][] board ,List<List<String>> allBoard,int col)
    {
        if(col==board.length)
        {
            saveBoard(board,allBoard);
            return;
        }
        for(int row=0;row<board.length;row++)
        {
            if(issafe(row,col,board))
            {
                board[row][col]='Q';
                helper(board,allBoard,col++);
                board[row][col]='.';
            }
        }
    }
    
    public  boolean issafe(int row ,int col, char[][] board)
    { //horizantal 
        for(int j=0;j<board.length;j++)
        {
            if(board[row][j]=='Q')
            {
                return false;
            }
         }
        
        
        // vertical
      for(int i=0;i<board.length;i++)
        {
            if(board[i][col]=='Q')
            {
                return false;
            }
         }
        // upper left
        int r=row;
         for(int c= col ;c>=0 && r>=0;c--)
        {
            if(board[r][c]=='Q')
            {
                return false;
            }
         }
        //upper right
        
        r=row;
         for(int c= col ; col<board.length && r>=0;r--,c++)
        {
            if(board[r][c]=='Q')
            {
                return false;
            }
         }
        
        // lower left
                
          r=row;
         for(int c= col ; col>=0 && r<board.length;r++,c--)
        {
            if(board[r][c]=='Q')
            {
                return false;
            }
         }
        
        //lower right
                
       // int r=row;
         for(int c= col ; col<board.length && r<board.length;c++,r++)
        {
            if(board[r][c]=='Q')
            {
                return false;
            }
         }
        return true;
        
    }
    
    public void saveBoard(char[][] board ,List<List<String>> allBoard)
    {
        String row="";
        List<String> newBoard = new ArrayList<>();
        for(int i=0;i<board.length;i++)
        {
            row="";
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]=='Q')
                {
                    row+='Q';
                }
                else
                {
                    row+='.';
                }
            }
            newBoard.add(row);
        }
        allBoard.add(newBoard);
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> allBoard=new ArrayList<>();
        char[][] board = new char[n][n];
        helper(board,allBoard,0);
        return allBoard;
    }
}
