/*

we are use this probem queue data structure they are follow FIFO approch
we are first add root in the queue then we we check left and right node and pop the root element in the tree or subtree.


*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        queue<TreeNode*>q;
        q.push(root);
        if(root==NULL)
            return ans;
        while(1)
        {
            int size=q.size();
            if(size==0)
                return ans;
            vector<int>data;
            while(size>0)
            {
                TreeNode* temp=q.front();
                q.pop();
                data.push_back(temp->val);
                // check left node
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL)
                    q.push(temp->right);
                size--;
                
            }
            ans.push_back(data);
        }
        return ans;
    }
};
