class Solution {
public int minCostConnectPoints(int[][] points) {
ArrayList<ArrayList> graph=new ArrayList<>();
for(int i=0;i<points.length;i++){
graph.add(new ArrayList<>());
}
for(int i=0;i<points.length;i++){
for(int j=0;j<points.length;j++){
if(i!=j){
int x1=points[i][0]; int y1=points[i][1];
int x2=points[j][0]; int y2=points[j][1];
int wt= Math.abs(x1-x2) + Math.abs(y1-y2);
graph.get(i).add(new pair(j,wt));
}
}
}

PriorityQueue<pair> pq=new PriorityQueue<>((a,b)->{
   return a.wt-b.wt; 
});
pq.add(new pair(0,0));
int ans=0;
boolean vis[]=new boolean[points.length];
while(pq.size()>0){
    pair rem=pq.remove();
    if(vis[rem.vt]) continue;
    vis[rem.vt]=true;
    ans+=rem.wt;
    ArrayList<pair> nbrs=graph.get(rem.vt);
    for(pair nbr:nbrs){
        if(vis[nbr.vt]==false){
            pq.add(nbr);
        }
    }
}    
return ans;    
}

static class pair{
    int vt;
    int wt;
    pair(int vt,int wt){
        this.vt=vt;
        this.wt=wt;
    }
}
}
